#! /usr/bin/env python3

import argparse, sys
from utility_scripts import dns_utility, whois_utility, shodan_utility, bannergrab_utility, flooder_utility, fuzzing_utility, mitm_utility

def main():

    parser = argparse.ArgumentParser(description='Pentesting-Multitool project arises from the need to gather some pentesting tools into one tool.'
                                                 ' It will be developed using Python3 adding some external libraries as DNSPython, pythonwhois or scapy.')

    # Argument for DNS function

    parser.add_argument('-DNS', metavar='--DNS', type=str, help='Using it you can get information about a DNS record of a specific domain.\n'
                        'Usage: <domain> -r <record> options: <-f --file>')

    # Argument for whois function

    parser.add_argument('-whois', metavar='--whois', type=str, help='Using it you can get information about a domain. '
                                                                   'Usage: <domain> options: <-f --file>.')

    # Argument for shodan search function

    parser.add_argument('-shodan', metavar='--shodan', type=str, help='Using it you can get information about the devices and services connected in a network.'
                                                                        'Usage: <search> (separating search arguments by \"-\") options: <-f --file, -full >')

    # Argument for banner grabber function

    parser.add_argument('-bgrabber', metavar='--bgrabber', type=str, help='Using it you can get information about some services in the specified ports and IP.'
                                                                          'Usage: <ip> -p <ports>(separated by \":\") options: <-file --file>.')

    # Optionals

    parser.add_argument('-p', metavar='--ports', required='-p' in sys.argv or '--ports' in sys.argv, type=str, help='Specify ports.')

    parser.add_argument('-full', action='store_true', help='Specify if you want the complete information or just the IP on shodan search.')

    parser.add_argument('-r', metavar='--record', required='-DNS' in sys.argv or '--DNS' in sys.argv, type=str, help='Record of a specific domain.')

    parser.add_argument('-f', metavar='--file',type=str, help='Filename where you want to save the result.')

    #Defining args

    args = parser.parse_args()

    #Calls
    if args.DNS is not None:
        dns_utility.dns_scan(args.DNS, args.r, args.f)
    elif args.whois is not None:
        whois_utility.whois_scan(args.whois, args.f)
    elif args.shodan is not None:
        shodan_utility.shodan_search(args.shodan, args.f, args.full)
    elif args.bgrabber is not None:
        bannergrab_utility.banner_grabbing(args.bgrabber, args.p, args.f)

if __name__ == '__main__':
    main()
